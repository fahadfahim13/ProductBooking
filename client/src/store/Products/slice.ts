import { createSlice, PayloadAction } from '@reduxjs/toolkit';

import { fetchAllProductsAsync } from './thunks';
import { ProductResponse, ProductState } from './types';

const initialState: ProductState = {
  data: [],
  status: 'idle',
  selectedProductForBooking: null,
  selectedProductForReturn: null,
  bookedProducts: [],
};

export const productSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetProducts: (state) => {
      state.data = [];
      state.status = 'idle';
    },
    selectProductForBooking: (state, action: PayloadAction<ProductResponse>) => {
      state.selectedProductForBooking = action.payload;
    },
    selectProductForReturn: (state, action: PayloadAction<ProductResponse>) => {
      state.selectedProductForReturn = action.payload;
    },
    bookProduct: (state, action: PayloadAction<ProductResponse>) => {
      const tempBookedProducts = state.bookedProducts;
      tempBookedProducts.push(action.payload);
      state.bookedProducts = tempBookedProducts;
      state.data[action.payload.id-1] = {
        ...state.data[action.payload.id-1],
        availability: false,
      }

    },
    returnProduct: (state, action: PayloadAction<ProductResponse>) => {
      const tempBookedProducts = state.bookedProducts;
      const tempBookedProductsIdx = state.bookedProducts.findIndex((p) => p.code === action.payload.code);
      if(tempBookedProductsIdx){
        tempBookedProducts.splice(tempBookedProductsIdx);
        state.bookedProducts = tempBookedProducts;
      }
      state.data[action.payload.id-1] = {
        ...state.data[action.payload.id-1],
        availability: true,
      }

    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload.data;
        state.selectedProductForBooking = action.payload.data.filter((p: ProductResponse) => p.availability)[0];
      });
  },
});

export default productSlice;
