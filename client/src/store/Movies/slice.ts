import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Movie } from 'components/MovieCard/types';

import { fetchMovieAsync, fetchMovieTotalAsync, searchMovieAsync } from './thunks';
import { MoviesState } from './types';

const initialState: MoviesState = {
  data: [],
  status: 'idle',
  total: 0,
  searchStatus: 'idle',
  searchResults: [],
  selectedMovie: null,
};

export const movieSlice = createSlice({
  name: 'movies',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetMovies: (state) => {
      state.data = [];
      state.status = 'idle';
      state.total = 0;
    },
    selectMovieForDisplay: (state, action: PayloadAction<Movie>) => {
      state.selectedMovie = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMovieAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(fetchMovieAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload.data;
      })
      .addCase(fetchMovieTotalAsync.pending, (state) => {
        state.total = 0;
      })
      .addCase(fetchMovieTotalAsync.fulfilled, (state, action) => {
        state.total = action.payload;
      })
      .addCase(searchMovieAsync.pending, (state) => {
        state.searchStatus = 'pending';
      })
      .addCase(searchMovieAsync.fulfilled, (state, action) => {
        state.searchStatus = 'idle';
        state.data = action.payload.data;
      });
  },
});

export default movieSlice;
